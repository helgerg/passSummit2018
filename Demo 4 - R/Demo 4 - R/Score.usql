REFERENCE ASSEMBLY [ExtR];

//R script
//DEPLOY RESOURCE @"HafslundStrom/Sandbox/PassSummit2018/Demo4/ScoreTest.R";

// rds model to use
DEPLOY RESOURCE @"/HafslundStrom/Sandbox/PassSummit2018/Demo4/TrainedModel.rds";

DECLARE EXTERNAL @inputFile = "HafslundStrom/Sandbox/PassSummit2018/Demo4/ScoreDataset.csv";
DECLARE EXTERNAL @OutputFile = "HafslundStrom/Sandbox/PassSummit2018/Demo4/Score.csv";

//R script
DECLARE  @myRScript = @"
library(RevoScaleR)

# Load pre-trained model
filename_model <- ""TrainedModel.rds""
boosted_fit <- readRDS(filename_model)

data_test <- inputFromUSQL[, !(colnames(inputFromUSQL) %in% c(""Par""))]

# Fill missing values
data_test[ data_test == """" | data_test == "" "" | data_test == ""na"" | data_test == ""NA""] <- NA
numcol <- sapply(data_test, is.numeric)
data_test[,numcol][is.na(data_test[,numcol])] <- 0

# Convert string columns to factors
data_test <- as.data.frame(unclass(data_test))

scores <- rxPredict(
  modelObject = boosted_fit,  
  data = data_test,
  type = ""response"",
  extraVarsToWrite=c(""HAICustomerId"", ""HAIMeterpointId"", ""EndDate"") )

outputdata <- data.frame( HAICustomerId=scores$HAICustomerId, HAIMeterpointId=scores$HAIMeterpointId, EndDate=scores$EndDate, MoverOut_prob=scores$MoverOut_prob) 
outputToUSQL <- outputdata
";

@input =
    EXTRACT [HAIMeterpointId] string,
            [HAICustomerId] string,
            [HAIContractIdStart] string,
            [HAIContractIdEnd] string,
            [Bydelsnr] string,
            [Bydel] string,
            [Delbydelsnummer_gammel] string,
            [Delbydel_gammel] string,
            [Delbydelsnummer] string,
            [Delbydel] string,
            [Grunnkretsnummer] string,
            [Grunnkrets] string,
            [StreetName] string,
            [ZipCode] string,
            [EstimatedAnnualConsumption] string,
            [EstimatedAnnualConsumptionGroup] string,
            [StartDate] string,
            [EndDate] string,
            [LifetimeDays] string,
            [LifetimeGroup] string,
            [MoverIn] string,
            [CustomerAge] string,
            [MovingRate] string,
            [SalesChannel] string,
            [AssumedHousingType] string,
            [AssumedRoomNumber] string,
            [HAIContractEndDate] string,
            [MoverOut] string
    FROM @inputFile
    USING Extractors.Csv(skipFirstNRows:1);

@Data =
    SELECT Extension.R.RandomNumberGenerator.GetRandomNumber(5) AS Par,
        HAICustomerId,
        HAIMeterpointId,
        EndDate,
        EstimatedAnnualConsumptionGroup,
        LifetimeGroup,
        MovingRate,
        MoverIn,
        CustomerAge,
        SalesChannel,
        AssumedHousingType,
        AssumedRoomNumber
    FROM @input;

@Scores =
    REDUCE @Data
    ON Par
    PRODUCE 
            Par,        
            HAICustomerId string,
            HAIMeterpointId string,
            EndDate string,
            MoverOut_prob double
    READONLY Par
    USING new Extension.R.Reducer(command : @myRScript, rReturnType : "dataframe");

OUTPUT @Scores TO @OutputFile USING Outputters.Tsv();
